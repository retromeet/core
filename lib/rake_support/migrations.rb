# frozen_string_literal: true

module RakeSupport
  # Contains methods to support running migrations
  module Migrations
    SEQUEL_BASE_MIGRATION = <<~SEQUEL_BASE_MIGRATION
      # frozen_string_literal: true

      Sequel.migration do
        change do
          create_table(:artists) do
            primary_key :id, type: :Bignum
            String :name, null: false
          end
        end
      end
    SEQUEL_BASE_MIGRATION
    VERSION_FORMAT = "%Y%m%d%H%M%S"
    MIGRATIONS_DIRECTORY = "db/migrations"
    PASSWORD_MIGRATIONS_DIRECTORY = "db/ph_migrations"

    class << self
      # Migrates the database up to +target_migration+.
      #
      # @param db [Sequel::Database] A connection to a database
      # @param target_migration [Integer,nil] The target migration, if left nil will migrate to the latest
      # @return [void]
      def migrate(db, target_migration: nil)
        Sequel.extension :migration
        Sequel::Migrator.apply(db, MIGRATIONS_DIRECTORY, target_migration)
      end

      # Migrates the database up to +target_migration+.
      #
      # @param db [Sequel::Database] A connection to a database, with the password user
      # @return [void]
      def password_migrate(db)
        Sequel.extension :migration
        Sequel::Migrator.run(db, PASSWORD_MIGRATIONS_DIRECTORY, table: "schema_info_password")
      end

      # Migrates the database down to +target_migration+.
      # If no target migration is given will migrate one migration down.
      #
      # @param db (see .migrate)
      # @param target_migration [Integer, nil] The target migration, if left nil will migrate one down
      # @return [void]
      def migrate_down(db, target_migration: nil)
        if target_migration.nil? || target_migration.empty?
          last_two_migrations = db[:schema_migrations].order_by(Sequel[:filename].desc).limit(2).select_map(:filename)
          target_migration = if last_two_migrations.size == 2
            last_two_migrations[1].to_i
          else
            0
          end
        end
        migrate(db, target_migration:)
      end

      # @param db (see .migrate)
      # @return [void]
      def dump_schema(db)
        return unless Environment.development? || Environment.test?

        db.extension :schema_dumper
        old_loggers = db.loggers
        db.logger = nil
        schema = db.dump_schema_migration(same_db: true)
        db.loggers = old_loggers
        current_migration = db[:schema_migrations].order_by(Sequel[:filename].desc).get(:filename)
        schema = "# **Autogenerated file! Do not modify by hand!**
# Current migration: #{current_migration}

#{schema}"
        File.write("db/schema.rb", schema)
        system("#{Gem.bin_path("rubocop", "rubocop")} -a db/schema.rb > /dev/null")
      end

      # Creates a new migration file, will add a timestamp and +name+ to the file.
      # It will contain +SEQUEL_BASE_MIGRATION+.
      # @return [String] The path to the newly created file
      def create_migration(name)
        version = Time.now.utc.strftime(VERSION_FORMAT)
        filename = "#{version}_#{name}.rb"
        fullpath = "#{MIGRATIONS_DIRECTORY}/#{filename}"
        File.write(fullpath, SEQUEL_BASE_MIGRATION)

        fullpath
      end
    end
  end
end
